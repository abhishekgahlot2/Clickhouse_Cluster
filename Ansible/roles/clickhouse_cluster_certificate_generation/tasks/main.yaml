---
- name: check connectivity
  ping:
    data: alive

- name: Generate a key that will be used for the new CA
  shell:
    chdir: "{{ clickhouse_base_directory_path }}{{ clickhouse_certs_base_path }}"
    cmd: "openssl genrsa -out clickhouse_ca.key  4096"
  register: ca_key_result

- name: Debug the result of generating the CA key
  debug:
    var: ca_key_result

- name: Generate a new self-signed CA certificate
  shell:
    chdir: "{{ clickhouse_base_directory_path }}{{ clickhouse_certs_base_path }}"
    cmd: "openssl req -x509 -subj '/CN=clickhouse.local CA' -nodes -key clickhouse_ca.key -days   3650 -out clickhouse_ca.crt"
  register: ca_cert_result

- name: Debug the result of generating the CA certificate
  debug:
    var: ca_cert_result

- name: Verify the contents of the new CA certificate
  shell:
    chdir: "{{ clickhouse_base_directory_path }}{{ clickhouse_certs_base_path }}"
    cmd: "openssl x509 -in clickhouse_ca.crt -text"
  register: ca_cert_verify_result

- name: Debug the result of verifying the CA certificate
  debug:
    var: ca_cert_verify_result

- name: Create a certificate request (CSR) and generate a key for each node
  shell:
    chdir: "{{ clickhouse_base_directory_path }}{{ clickhouse_certs_base_path }}"
    cmd: openssl req -newkey rsa:4096 -nodes -subj "/CN={{ item.common_name }}" -addext "subjectAltName = DNS:{{ item.dns_host_1 }}, DNS:{{ item.dns_host_2 }} " -keyout {{ item.key_name }}.key -out {{ item.csr_name }}.csr
  with_items:
    - { key_name: 'clickhouse-1', common_name: 'clickhouse-1', dns_host_1: 'clickhouse-1', dns_host_2: 'localhost', csr_name: 'clickhouse-1' }
    - { key_name: 'clickhouse-2', common_name: 'clickhouse-2', dns_host_1: 'clickhouse-2', dns_host_2: 'localhost', csr_name: 'clickhouse-2' }
    - { key_name: 'clickhouse-3', common_name: 'clickhouse-3', dns_host_1: 'clickhouse-3', dns_host_2: 'localhost', csr_name: 'clickhouse-3' }
  register: csr_result

- name: Debug the result of creating CSRs and keys
  debug:
    var: csr_result

- name: Using the CSR and CA, create new certificate and key pairs
  shell:
    chdir: "{{ clickhouse_base_directory_path }}{{ clickhouse_certs_base_path }}"
    cmd: openssl x509 -req -in {{ item.csr_name }}.csr -out {{ item.crt_name }}.crt -CAcreateserial -CA clickhouse_ca.crt -CAkey clickhouse_ca.key -days   365
  with_items:
    - { csr_name: 'clickhouse-1', crt_name: 'clickhouse-1' }
    - { csr_name: 'clickhouse-2', crt_name: 'clickhouse-2' }
    - { csr_name: 'clickhouse-3', crt_name: 'clickhouse-3' }
  register: cert_result

- name: Debug the result of creating certificates
  debug:
    var: cert_result

- name: Verify the certs for subject and issuer
  shell:
    chdir: "{{ clickhouse_base_directory_path }}{{ clickhouse_certs_base_path }}"
    cmd: "openssl x509 -in {{ item.crt_name }}.crt -text -noout"
  with_items:
    - { crt_name: 'clickhouse-1' }
    - { crt_name: 'clickhouse-2' }
    - { crt_name: 'clickhouse-3' }
  register: cert_verify_result

- name: Debug the result of verifying certificates
  debug:
    var: cert_verify_result

- name: Check that the new certificates verify against the CA cert
  shell:
    chdir: "{{ clickhouse_base_directory_path }}{{ clickhouse_certs_base_path }}"
    cmd: "openssl verify -CAfile clickhouse_ca.crt {{ item.crt_name }}.crt"
  with_items:
    - { crt_name: 'clickhouse-1' }
    - { crt_name: 'clickhouse-2' }
    - { crt_name: 'clickhouse-3' }
  register: cert_verify_ca_result

- name: Debug the result of verifying certificates against the CA
  debug:
    var: cert_verify_ca_result


- name: Fetching the certs for keeper
  ansible.builtin.fetch:
    src: "{{ clickhouse_base_directory_path }}{{ item.remote_file }}"
    dest: "$PWD/roles/clickhouse_keeper_setup/files/certs/{{ item.local_file }}"
    flat: yes
  with_items:
    - { remote_file: 'clickhouse-1.crtt', local_file: 'clickhouse-1.crt' }
    - { remote_file: 'clickhouse-1.csr', local_file: 'clickhouse-1.csr' }
    - { remote_file: 'clickhouse-1.key', local_file: 'clickhouse-1.key' }
    - { remote_file: 'clickhouse-2.crtt', local_file: 'clickhouse-2.crt' }
    - { remote_file: 'clickhouse-2.csr', local_file: 'clickhouse-2.csr' }
    - { remote_file: 'clickhouse-2.key', local_file: 'clickhouse-2.key' }
    - { remote_file: 'clickhouse-3.crtt', local_file: 'clickhouse-3.crt' }
    - { remote_file: 'clickhouse-3.csr', local_file: 'clickhouse-3.csr' }
    - { remote_file: 'clickhouse-3.key', local_file: 'clickhouse-3.key' }
    - { remote_file: 'clickhouse_ca.crt', local_file: 'clickhouse_ca.crt' }
    - { remote_file: 'clickhouse_ca.key', local_file: 'clickhouse_ca.key' }


#
#- name: Fetching the certs for clickhouse
#  ansible.builtin.fetch:
#    src: "{{ kafka_cert_directory_base_path }}{{ item.remote_file }}"
#    dest: "$PWD/roles/clickhouse_setup/files/certs/{{ item.local_file }}"
#    flat: yes
#  with_items:
#    - { remote_file: 'clickhouse-1.crtt', local_file: 'clickhouse-1.crt' }
#    - { remote_file: 'clickhouse-1.csr', local_file: 'clickhouse-1.csr' }
#    - { remote_file: 'clickhouse-1.key', local_file: 'clickhouse-1.key' }
#    - { remote_file: 'clickhouse-2.crtt', local_file: 'clickhouse-2.crt' }
#    - { remote_file: 'clickhouse-2.csr', local_file: 'clickhouse-2.csr' }
#    - { remote_file: 'clickhouse-2.key', local_file: 'clickhouse-2.key' }
#    - { remote_file: 'clickhouse-3.crtt', local_file: 'clickhouse-3.crt' }
#    - { remote_file: 'clickhouse-3.csr', local_file: 'clickhouse-3.csr' }
#    - { remote_file: 'clickhouse-3.key', local_file: 'clickhouse-3.key' }
#    - { remote_file: 'clickhouse_ca.crt', local_file: 'clickhouse_ca.crt' }
#    - { remote_file: 'clickhouse_ca.key', local_file: 'clickhouse_ca.key' }
